import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout

# get the data and pre process it
(X_train,Y_train),(X_test,Y_test)=mnist.load_data()

X_train.shape,Y_train.shape,X_test.shape,Y_test.shape

def plot_input_img(i):
    plt.imshow(X_train[i], cmap='binary')
    plt.title(Y_train[i])
    plt.show()

for i in range(10):
    plot_input_img(i)

#pre process the image

#normalizing image to [0,1] range
X_train=X_train.astype(np.float32)/255
X_test=X_test.astype(np.float32)/255
#reshape the dimension of image to(28,28,1)
X_train=np.expand_dims(X_train,-1)
X_test=np.expand_dims(X_test,-1)

#converting Y_train to one hot vector
Y_train=keras.utils.to_categorical(Y_train)
Y_test=keras.utils.to_categorical(Y_test)

#model

model=Sequential()

model.add(Conv2D(32,(3,3), input_shape=(28,28,1),activation='relu'))
model.add(MaxPool2D((2,2)))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPool2D((2,2)))

model.add(Flatten())

#for reducing overfitting
model.add(Dropout(0.25))

model.add(Dense(units=10,activation='softmax'))

model.summary

model.compile(optimizer='adam',loss=keras.losses.categorical_crossentropy, metrics=["accuracy"])

#callbacks
from keras.callbacks import EarlyStopping,ModelCheckpoint

#earlystopping
es=EarlyStopping(monitor="val_acc",min_delta=0.01,patience=4,verbose=1)

#model checkpoint
mc=ModelCheckpoint("./bestmodel.h5",monitor="val_acc,verbose=1,save_best_only=True")

cb=[es,mc]

history = model.fit(X_train,Y_train,epochs=50,validation_split=0.3, callbacks=cb)

model_S=keras.models.load_model("/content/bestmodel.h5")

score=model_S.evaluate(X_test,Y_test)

print(f"the model accuracy is {score[1]}")

